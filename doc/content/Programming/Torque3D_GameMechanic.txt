<font color="#13B7FD" size="15"><b>Torque 3D</b></font><br>
<br>
<br><font color="#cccccc" size="11"><b>Gameplay Mechanic Method</b></font>
<br>
function startGame()<br>
{<br>
	$Game::Duration = 10*100;<br>
	Timebox.SetValue($Game::Duration);<br>
   if ($Game::Duration) // Start the game timer <br>
   {<br>
      $Game::Schedule = schedule( $Game::Duration * 1000, 0, "onGameDurationEnd" );<br>
      $myRemainingTime = $Game::Duration;<br>
      schedule(1000, 0, "onEverySecond");<br>
   }<br>
   $Game::Running = true;<br>
   schedule( 2000, 0, "CreateBots");<br>
}<br>
<br>
function OnServerCreated()<br>
//----------------------------------------------------------------------------<br>
// Once the engine has fired up the server, this function is called<br>
//----------------------------------------------------------------------------<br>
{<br>
   $Game::StartTime = 0;<br>
<br>
   Exec("./misc/sndprofiles.cs");<br>
   Exec("./misc/camera.cs");<br>
   Exec("./misc/shapeBase.cs");<br>
   Exec("./misc/item.cs");<br>
   Exec("./players/player.cs"); // Load the player datablocks and methods<br>
   Exec("./players/beast.cs"); // Load the player datablocks and methods<br>
   Exec("./players/ai.cs"); // Load the player datablocks and methods<br>
   Exec("./weapons/weapon.cs");<br>
   Exec("./weapons/crossbow.cs");<br>
}<br>
<br>
//============================================================================<br>
// GameConnection Methods<br>
// Extensions to the GameConnection class. Here we add some methods<br>
// to handle player spawning and creation.<br>
//============================================================================<br>
new AudioDescription( AudioTest ) <br>
{<br>
   volume       = 1.0;   //default volume<br>
   isLooping    = false;  //loop over and over<br>
   is3D         = true;  //positional?<br>
   type         = 0;     //channel/audio type<br>
};<br>
<br>
new AudioProfile ( MoreLoonSound )<br>
{<br>
   filename    = "control/data/sound/hardy2sh.wav";<br>
   description = "AudioTest";<br>
   preload     = true;<br>
};<br>
<br>
function BirsSound(%volume)<br>
{<br>
     %x = GetRandom(-5, 15); //generating random number<br>
     %y = GetRandom(-5, 15); //generating random number<br>
     %z = checkSpot(%x, %y);<br>
	if (%z == "")<br>
	{<br>
	    schedule( 70, 0, "BirsSound", %volume );<br>
	}<br>
	else <br>
	{<br>
        %z += 15; <br>
	    alxListenerf( AL_GAIN_LINEAR, %volume );<br>
        $pref::Audio::masterVolume = %volume;<br>
		$Bird = alxPlay(MoreLoonSound, %x SPC %y SPC %z );<br>
		schedule( 1000*5 , 0, "BirsSound", %volume );<br>
	}<br>
	  <br>
}<br>
<br>
function checkSpot(%x, %y)<br>
{<br>
   %start    = %x SPC %y SPC "5000";<br>
   %end      = %x SPC %y SPC "-1";<br>
   %ground   = containerRayCast( %start, %end, $TypeMasks::TerrainObjectType, 0 );<br>
   %z        = getWord( %ground, 3 );<br>
   %mask     = $TypeMasks::ForceFieldObjectType<br>
              | $TypeMasks::InteriorObjectType<br>
              | $TypeMasks::ItemObjectType<br>
              | $TypeMasks::MoveableObjectType<br>
              | $TypeMasks::PlayerObjectType<br>
              | $TypeMasks::StaticShapeObjectType<br>
              | $TypeMasks::TerrainObjectType<br>
              | $TypeMasks::VehicleObjectType;<br>
   %g2       = containerRayCast( %start, %end, %mask, 0 );<br>
   %z2       = getWord( %g2, 3 );<br>
   <br>
   return %z2;<br>
}<br>
<br>
function onEverySecond ()<br>
{<br>
  if($myRemainingTime > 0)<br>
   {<br>
    $myRemainingTime--;<br>
    //echo("here" @ $myRemainingTime);<br>
    Timebox.SetValue($myRemainingTime);<br>
    schedule(1000, 0, "onEverySecond");<br>
   }<br>
  else<br>
   {<br>
	schedule( 70, 0, "startGame" );<br>
   }<br>
}<br>
function onGameDurationEnd()<br>
{<br>
	MessageBoxYesNo( "Out of time", "You outta time, sucka! Exit from this Mission?", "Quit();", "Scorebox.SetValue(Scorebox.GetValue()-5);");<br>
}<br>
function GameConnection::SpawnPlayer(%this)<br>
//----------------------------------------------------------------------------<br>
// This is where we place the player spawn decision code.<br>
// It might also call a function that would figure out the spawn<br>
// point transforms by looking up spawn markers.<br>
// Once we know where the player will spawn, then we create the avatar.<br>
//----------------------------------------------------------------------------<br>
{<br>
   $player= %this.createPlayer("0 0 201 1 0 0 0");<br>
   //echo(%this.player);<br>
   //echo(%this.player.getTransform());<br>
}<br>
<br>
function GameConnection::CreatePlayer(%this, %spawnPoint)<br>
//----------------------------------------------------------------------------<br>
// Create the player's avatar object, set it up, and give the player control<br>
// of it.<br>
//----------------------------------------------------------------------------<br>
{<br>
   if (%this.player > 0)//The player should NOT already have an avatar object.<br>
   {                     // if he does, that's a Bad Thing.<br>
      Error( "Attempting to create an angus ghost!" );<br>
   }<br>
   // Create the player object<br>
   %player = new Player() {<br>
      dataBlock = MaleAvatar;   // defined in players/player.cs<br>
      client = %this;           // the avatar will have a pointer to its<br>
   };                           // owner's connection<br>
<br>
   // Player setup...<br>
   %player.setTransform(%spawnPoint); // where to put it<br>
   $playerid = %player;<br>
   // Update the camera to start with the player<br>
   %this.camera.setTransform(%player.getEyeTransform());<br>
   %player.setEnergyLevel(100);<br>
<br>
   // Give the client control of the player<br>
   %this.player = %player;<br>
   echo("this is the player handle" SPC %this.player);<br>
   %this.setControlObject(%player);<br>
}<br>
<br>