<font color="#13B7FD" size="15"><b>Maxwells Demon</b></font><br>
<br>
<br><font color="#cccccc" size="11"><b>NeuroSky BCI Code Sample</b></font>
<br>
using System;<br>
using System.Diagnostics;<br>
using System.IO;<br>
using System.Runtime.InteropServices;<br>
using System.Threading;<br>
using Blade3D.Runtime;<br>
<br>

namespace NeuroSkyFinal<br>
{<br>
    public interface INeuroSkyFinal<br>
    {<br>
        [DefineProp(Description = "The Attention meter of the NeuroSky", DefaultValue = "0.0", IsPersistent = true, IsReadOnly = true, DisplayName = "AttentionMeter", StepValue = "1.0")]<br>
        float AttentionMeter { get; set; }<br>

        [DefineProp(Description = "The Meditation meter of the NeuroSky", DefaultValue = "0.0", IsPersistent = true, IsReadOnly = true, DisplayName = "MeditationMeter", StepValue = "1.0")]<br>
        float MeditationMeter { get; set; }<br>

        [DefineProp(Description = "Indicates if the NeuroSky is on or off")]<br>
        bool NeuroSkyConnection { get; set; }<br>
<br>
    }<br>
    [<br>
        Blade3DComponent("NeuroSkyComponent", typeof(INeuroSkyFinal))<br>
    ]<br>
    public class NSkyFinalClass: ComponentBase, INeuroSkyFinal<br>
    {<br>
        //-------------------------------------------------------------------------------------<br>
        public const int STREAM_PACKETS = 2;<br>
        public const int THINKGEAR_LOG_ESENSE_ATTENTION = 1;<br>
        public const int THINKGEAR_LOG_ESENSE_MEDITATION = 2;<br>
<br>
        int NSKY; <br>
        bool hasBeenOpened = false;<br>
        <br>

        [DllImport("thinkgear.dll")]<br>
        public static extern int GetThinkGearESenseValue(int id, int eSenseType);<br>
<br>
        [DllImport("thinkgear.dll")]<br>
        public static extern int StartThinkGearStream(int id, int streamType, string streamName);<br>
<br>
        [DllImport("thinkgear.dll")]<br>
        public static extern int NewThinkGearInstance();<br>
        //-------------------------------------------------------------------------------------<br>
        <br>
        public Property<float> AttentionMeter;             //get the result of the attention read in by NeuroSky<br>
        public Property<float> MeditationMeter;            //get the result of the Meditation read in by NeuroSky<br>
        public Property<bool> NeuroSkyConnection;           //checks to see if the neurosky is connecter<br>
<br>
        public NSkyFinalClass()<br>
        {<br>
            this.AttentionMeter = new Property<float>(this);<br>
            this.MeditationMeter = new Property<float>(this);<br>
            this.NeuroSkyConnection = new Property<bool>(this);<br>
        }<br>

        #region Interface Methods<br>
        float INeuroSkyFinal.AttentionMeter<br>
        {<br>
            get<br>
            {<br>
                return this.AttentionMeter.Value;<br>
            }<br>
            set<br>
            {<br>
                this.AttentionMeter.Value = value;<br>
            }<br>
        }<br>
        float INeuroSkyFinal.MeditationMeter<br>
        {<br>
            get<br>
            {<br>
                return this.MeditationMeter.Value;<br>
            }<br>
            set<br>
            {<br>
                this.MeditationMeter.Value = value;<br>
            }<br>
        }<br>
        bool INeuroSkyFinal.NeuroSkyConnection<br>
        {<br>
            get<br>
            {<br>
                return this.NeuroSkyConnection.Value;<br>
            }<br>
            set<br>
            {<br>
                XConsole.WriteLine("The Set NeuroSkyConnection is " + this.NeuroSkyConnection.Value);<br>
                this.NeuroSkyConnection.Value = value;<br>
            }<br>
        }<br>
        #endregion<br>
<br>
        protected override void Attach()<br>
        {<br>
            //Subscribe to the frames first unpdate<br>
            //for the scene item<br>
            this.SceneItem.PreUpdate += pleaseWork;<br>
            base.Attach();<br>
        }<br>
<br>
        protected override void Detach()<br>
        {<br>
            this.SceneItem.PreUpdate -= pleaseWork;<br>
            base.Detach();<br>
        }<br>
<br>
        public void pleaseWork(ISceneItem sceneItem)<br>
        {<br>
            if (ObjectStore.ExecutionMode != ExecutionMode.PlayMode)<br>
                return;<br>
            if (this.NeuroSkyConnection.Value == true && hasBeenOpened == false)<br>
            {<br>
                //Initiate NeuroSky technology. <br>
                //In this sample tutorial, the COM port has been hard coded to COM5. Change as appropriate. <br>
                NSKY = NewThinkGearInstance();<br>
                StartThinkGearStream(NSKY, STREAM_PACKETS, "COM5");<br>
                hasBeenOpened = true;<br>
            }<br>
            else if(this.NeuroSkyConnection.Value == true && hasBeenOpened == true)<br>
            {<br>
                //--------------------------------------------------------------------------------------------<br>
                this.AttentionMeter.Value = GetThinkGearESenseValue(NSKY, THINKGEAR_LOG_ESENSE_ATTENTION);<br>
                //XConsole.Write(this.AttentionMeter.Value.ToString());<br>
                this.MeditationMeter.Value = GetThinkGearESenseValue(NSKY, THINKGEAR_LOG_ESENSE_MEDITATION);<br>
                //XConsole.WriteLine("  " + this.MeditationMeter.Value.ToString());<br>
                <br>
            }<br>
            else<br>
            {<br>
                XConsole.WriteLine("You have not started the BCI");<br>
            }<br>
        }<br>
    }<br>
}<br>
<br>