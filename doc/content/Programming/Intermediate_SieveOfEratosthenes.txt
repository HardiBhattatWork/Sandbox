<font color="#13B7FD" size="15"><b>Intermediate Computer Science</b></font><br>
<br>
<br><font color="#cccccc" size="11"><b>SieveOfEratosthenesDriver.java</b></font>
<br>
/*****************************************************************************/<br>
/*                                                                           */<br>
/* SieveOfEratosthenesDriver.java                                            */<br>
/*                                                                           */<br>
/* Author: Hardik Bhatt                                                      */<br>
/* Date: 2004 January 20                                                     */<br>
/*                                                                           */<br>
/* A driver for the SieveOfEratosthenes class                                */<br>
/*                                                                           */<br>
/*****************************************************************************/<br>
public class SieveOfEratosthenesDriver<br>
{<br>
    public static void main (String[] args)<br>
    {<br>
	// this one uses the default constructor<br>
	SieveOfEratosthenes sieve1 = new SieveOfEratosthenes();<br>
	// this one uses thes constuctor that sets a size<br>
	SieveOfEratosthenes sieve2 = new SieveOfEratosthenes( 1000 );<br>
<br>
	System.out.println( "The primes up to 100 are:" );<br>
	sieve1.printPrimes();<br>
	System.out.println( "\n\n" );<br>
	System.out.println( "The primes up to 1000 are:" );<br>
	sieve2.printPrimes();<br>
    } // main method<br>
} // SieveOfEratosthenesDriver class<br>
<br>
<br><font color="#cccccc" size="11"><b>SieveOfEratosthenes.java</b></font>
<br>
/*****************************************************************************/<br>
/*                                                                           */<br>
/* SieveOfEratosthenes.java                                                  */<br>
/*                                                                           */<br>
/* Author: Hardik Bhatt                                                      */<br>
/* Date: 2004 January 20                                                     */<br>
/*                                                                           */<br>
/* A class that calculates the prime numbers using the "Sieve of             */<br>
/* Eratosthenes". First all the multiples of two are eliminated, then all the*/<br>
/* multiples of three, then of 4, etc. The numbers remaining are prime.      */<br>
/*                                                                           */<br>
/* Constructors:                                                             */<br>
/*   SieveOfEratosthenes() - The default constructor - constructs a          */<br>
/*      boolean array of size "size" and finds the prime numbers up to 99    */<br>
/*   SieveOfEratosthenes( int size ) - constructs a boolean array of size    */<br>
/*      "size" and finds the prime numbers up to size - 1                    */<br>
/*                                                                           */<br>
/* Methods:                                                                  */<br>
/*   printPrimes() - Prints out the primes neatly in right-justified columns */<br>
/*                                                                           */<br>
/* Note: This is not the best implementation of this algorithm. In class,    */<br>
/* We will discuss improving the code                                        */<br>
/*                                                                           */<br>
/*****************************************************************************/<br>
<br>
public class SieveOfEratosthenes<br>
{<br>
    final int DEFAULT_SIZE = 100;   // find primes up to 99 by default<br>
    final int COLUMNS = 15;         // print the primes 15 per line<br>
    private boolean [] array;       // the array to represent the "sieve"<br>

    // Constructors:<br>
    // Default Constructor - finds primes up to 99<br>
    public SieveOfEratosthenes ()<br>
    {<br>
	array = new boolean [DEFAULT_SIZE];<br>
	findPrimes ();<br>
    } // End default constructor<br>

    // Constructor for finding primes up to a specified number - 1<br>
    public SieveOfEratosthenes (int size)<br>
    {<br>
	array = new boolean [size];<br>
	findPrimes ();<br>
    } // End constructor ( int )<br>

    // Utility method that actually computes the "Sieve of Eratosthenes"<br>
    private void findPrimes ()<br>
    {<br>
	int i, j;   // loop counters<br>

	// initialize array<br>
	for (i = 0 ; i %3C array.length ; i++)<br>
	    array [i] = true;<br>

	// Set the non-prime indices to "false"<br>
	for (i = 2 ; i %3C= (array.length / 2) ; i++) // Why "SIZE/2"? Because<br>
	    // since it is a 2d array and the defold size is 100 this for loop<br>
	    // would use 50 and the other would also use 50 to compensate to<br>
	    // defolt 100<br>
	    for (j = 2 * i ; j %3C array.length ; j += i) //Explain this for loop<br>
		array [j] = false;<br>
	// this for loop would use j to set all the non-prime indices to fase<br>
    } // End method findPrimes<br>

    // Prints  the prime number neatly in columns - COLUMNS-many columns per line<br>
    public void printPrimes ()<br>
    {<br>
	int counter;    // What is this variable used for? This variable is<br>
	// used in a for loop to count the number of time it was looped<br>
	int i; // loop counter<br>

	counter = 1;<br>
	for (i = 1 ; i %3C array.length ; i++)<br>
	    if (array [i] == true)<br>
	    {<br>
		if (counter % COLUMNS == 1)   // What is this line for?<br>
		    // this like is here to devides COLUMS by counter and compares<br>
		    // it to 1, if the remainder is equal to 1 that it runs the<br>
		    // following function<br>
		    rightJustified (String.valueOf (i), 4);<br>
		else if (counter % COLUMNS == 0)   //What is this line for?<br>
		    // similarly this line devides COLUMS by counter and compares<br>
		    // it to 0, if the remainder is equal to 0 that it rins the<br>
		    // following function<br>
		    System.out.print (",\n");<br>
		else<br>
		{<br>
		    System.out.print (",");<br>
		    rightJustified (String.valueOf (i), 4);<br>
		}<br>
		counter++;<br>
	    }<br>
    } // End method printPrimes<br>


    // This method is used to print right-justified in a field of a given width<br>
    private void rightJustified (String s, int fieldSize)<br>
    {<br>
	StringBuffer padding = new StringBuffer (); // a dynamic string variable<br>
	int i;  // loop counter<br>

	// fill left side of field with as many spaces as necessary<br>
	for (i = 0 ; i %3C fieldSize - s.length () ; i++)<br>
	{<br>
	    padding.append (' ');<br>
	}<br>

	System.out.print (padding + s);<br>
    } // End method rightJustified<br>
} // End class SieveOfEratosthenes<br>
<br>
<br>Output:<br>
The primes up to 100 are:<br>
   1,   2,   3,   5,   7,  11,  13,  17,  19,  23,  29,  31,  37,  41,<br>
  47,  53,  59,  61,  67,  71,  73,  79,  83,  89,  97<br>


The primes up to 1000 are:<br>
   1,   2,   3,   5,   7,  11,  13,  17,  19,  23,  29,  31,  37,  41,<br>
  47,  53,  59,  61,  67,  71,  73,  79,  83,  89,  97, 101, 103, 107,<br>
 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191,<br>
 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271,<br>
 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367,<br>
 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457,<br>
 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563,<br>
 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647,<br>
 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751,<br>
 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857,<br>
 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967,<br>
 977, 983, 991, 997<br>
<br>