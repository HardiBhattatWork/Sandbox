<font color="#13B7FD" size="15"><b>Data Structures</b></font><br>
<br>
<br><font color="#cccccc" size="11"><b>EndianSwap.java</b></font>
<br>
/*****************************************************************************/<br>
/*                                                                           */<br>
/* SlicingTree.java                                                          */<br>
/*                                                                           */<br>
/* Author: Hardik Bhatt                                                      */<br>
/* Date: November 4, 2004                                                    */<br>
/*****************************************************************************/<br>
import java.io.*;<br>
import java.util.*;<br>
import java.lang.Integer;<br>
public class SlicingTreeDriver<br>
{<br>
    public static void main (String [] args) throws IOException<br>
    {<br>
	SlicingTree STTree = new SlicingTree (); // This hold the slicing tree<br>
	String line;                            // this holds the different commands from the file<br>
	StringTokenizer token;                  // this holds the tokenized commands<br>
	STNode temp;                            // temp node to store stuff<br>
<br>
	FileReader file = new FileReader ("test-hw3.txt");  // used ot read in from a file<br>
	BufferedReader input = new BufferedReader (file);<br>
	do
	{
	    token = new StringTokenizer (input.readLine ());
	    line = token.nextToken ();
	    //System.out.println (line);
	    if (line.equals ("create-root"))
	    {
		STTree.create_root ();
		STTree.assign_label (STTree.getRoot (), token.nextToken ().charAt (0));
	    }
	    else if (line.equals ("cut-h"))
	    {
		temp = STTree.findLabel (token.nextToken ().charAt (0));
		STTree.cut_horizantel (temp);
		STTree.assign_label (temp.getLeft (), token.nextToken ().charAt (0));
		STTree.assign_label (temp.getRight (), token.nextToken ().charAt (0));
	    }
	    else if (line.equals ("cut-v"))
	    {
		temp = STTree.findLabel (token.nextToken ().charAt (0));
		STTree.cut_vertical (temp);
		STTree.assign_label (temp.getLeft (), token.nextToken ().charAt (0));
		STTree.assign_label (temp.getRight (), token.nextToken ().charAt (0));
	    }
	    else if (line.equals ("assign-w"))
	    {
		String str = token.nextToken ();
		temp = STTree.findLabel (str.charAt (0));
		Integer temp_width = new Integer (token.nextToken ());
		STTree.assign_width (temp, temp_width.intValue ());
	    }
	    else if (line.equals ("assign-h"))
	    {
		temp = STTree.findLabel (token.nextToken ().charAt (0));
		Integer temp_height = new Integer (token.nextToken ());
		STTree.assign_height (temp, temp_height.intValue ());
	    }
	    else if (line.equals ("compact"))
	    {
		STTree.compact ();
	    }
	    else if (line.equals ("display"))
	    {
		STTree.display ();
	    }
	}
	while (!line.equals ("quit"));
    }
}


