<font color="#13B7FD" size="15"><b>Artificial Intelligence</b></font><br>
<br>
<br><font color="#cccccc" size="11"><b>Depthfirst Search Method</b></font>
<br>
  //**************************************<br>
  //A method that performs a Depth first search algorithm<br>
  //using recursion to implement the best possible way to<br>
  //reach the ghost. given the search conditions.<br>
  public static void DFS(int GBx, int GBy)throws EmptyStackException<br>
   {<br>
	  //***Last move holder. The number that is popped out of the stack<br>
     int lastMove = -1;<br>
	  //***Setting the coordinates altredy visited to true<br>
	  visited[GBx][GBy] = true;<br>
	  //***Removing the ghost buster form that coordinate<br>
	  removeGhostbuster(GBx, GBy);<br>
	  //***Checking if this coordinare this our goal<br>
	  if (GBx == ghostX && GBy == ghostY)<br>
	   {<br>
	      System.out.println("You have reached the ghost");<br>
		}<br>
		//***If possible move left. Then recurse<br>
      else if ((openSpace(GBx, GBy - 1)) &&  (!visited[GBx][GBy - 1]))<br>
		{<br>
			moveGhostbuster(GBx, GBy - 1);<br>
			wait(500);<br>
			DFSstack.push(new Integer (WEST));<br>
			DFS(GBx, GBy - 1);	<br>
      }<br>
		//***If possible move up. Then recurse<br>
      else if ((openSpace(GBx - 1, GBy))  &&  (!visited[GBx - 1][GBy])) <br>
		{<br>
			moveGhostbuster(GBx - 1, GBy);<br>
			wait(500);<br>
			DFSstack.push(new Integer (NORTH));<br>
			DFS(GBx - 1, GBy);<br>
<br>
      }<br>
		//***if possible move right. Then recurse<br>
      else if ((openSpace(GBx, GBy + 1))  &&  (!visited[GBx][GBy + 1])) <br>
		{<br>
			moveGhostbuster(GBx, GBy + 1);<br>
			wait(500);<br>
			DFSstack.push(new Integer (EAST));<br>
			DFS(GBx, GBy + 1);<br>
      }<br>
		//***if possible move down. Then recurse<br>
      else if ((openSpace(GBx + 1, GBy))  &&  (!visited[GBx + 1][GBy])) <br>
		{<br>
			moveGhostbuster(GBx + 1, GBy);<br>
			wait(500);<br>
			DFSstack.push(new Integer (SOUTH));<br>
			DFS(GBx + 1, GBy);<br>
      }<br>
		//***If the open stack is empty. Then Back track<br>
		else if (!DFSstack.isEmpty())<br>
		{<br>
			lastMove = ((Integer) DFSstack.pop()).intValue();  //get last move<br>
			if (lastMove == WEST)<br>
			{<br>
				moveGhostbuster(GBx, GBy + 1);<br>
				DFS(GBx, GBy + 1);<br>
			}<br>
			else if (lastMove == NORTH)<br>
			{<br>
				moveGhostbuster(GBx + 1, GBy);<br>
				DFS(GBx + 1, GBy);<br>
			}<br>
			else if (lastMove == EAST)<br>
			{<br>
				moveGhostbuster(GBx, GBy - 1);<br>
				DFS(GBx, GBy - 1);<br>
			}<br>
			else if (lastMove == SOUTH)<br>
			{<br>
				moveGhostbuster(GBx - 1, GBy);<br>
				DFS(GBx - 1, GBy);<br>
			}<br>
		}<br>
		//***Else the goal could not be reached<br>
		else<br>
		{<br>
			System.out.println("A Solution cannot be found");<br>
		}<br>
    }<br>
	<br>