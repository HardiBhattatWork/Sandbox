<font color="#13B7FD" size="15"><b>Organization & Architecture</b></font><br>
<br>
<br><font color="#cccccc" size="11"><b>InterpreterDriver.java</b></font>
<br>
/*<br>
file  : InterpreterDriver<br>
date  : 2/9/05<br>
author: Hardik Bhatt<br>
description: the main with runs the interpreter class. main<br>
is the one creating the array which represents the memory<br>
*/<br>
<br>
public class InterpreterDriver<br>
{<br>
    public static void main (String[] args)<br>
    {<br>
	//interpreter constructor<br>
	Interpreter InterpreteThis = new Interpreter (true);<br>
	// Assigning values in memory<br>
	int memory[] = {5, 9, 1, 8, 3, 7, 1, -1, 3, 2, 4, 5, 9, 9, 2,5};<br>
<br>
	// Call the interpret method with starting point 0<br>
	InterpreteThis.interpret (memory, 0);<br>
<br>
    } // ends main<br>
} // ends class<br>
<br>
<br><font color="#cccccc" size="11"><b>Interpreter.java</b></font>
<br>
/*<br>
Interpreter assignment:<br>
<br>
    1. As mentioned in class, the run_bit would be typically part of a PS<br>
       (Processor Status)/Flag register.  Similarly to the PC and AC,<br>
       modify the code below to implement a PS and add another bit for<br>
       debugging.  When this bit is set, our "processor" is in debug mode.<br>
       When in debug mode, our processor should output the contents of the<br>
       AC after every instruction.<br>
<br>
    2. Change the code below to implement fixed length instructions.  All<br>
       instructions are 2 ints in length (one int for the opcode and one<br>
       for the operand).<br>
<br>
    3. Implement the following instructions:<br>
<br>
	 CLR        %3c-- set AC to 0<br>
	 ADDI  x    %3c-- adds the value of x to the AC<br>
	 ADDM  y    %3c-- adds the value in memory location y to AC<br>
	 HALT       %3c-- instruction which halts the processor<br>
<br>
    4. Test your "processor" by giving it sample "programs."  Hand in<br>
       printouts of:<br>
	   a) your program<br>
	   b) the sample input and output test runs<br>
       Also email me your program.<br>
*/<br>
//----------------------------------------------------------------------<br>
/*<br>
file  : Interpreter<br>
date  : 2/9/05<br>
author: Hardik Bhatt<br>
description:<br>
*/<br>
//----------------------------------------------------------------------<br>
<br>
public class Interpreter<br>
{<br>
    static int PC;           //program counter holds address of next instr<br>
    static int AC;           //the accumulator, a register for doing arithmetic<br>
    static int instr;        //a holding register for the current instruction<br>
    static int data_loc;     //the address of the data, or -1 if none<br>
    static int data;         //holds the current operand<br>
    static boolean[] Buggs = new boolean [2];   // holds boolean valus for run-bit and debug<br>
    static int run_bit = 0;   //a bit that can be turned off to halt the machine<br>
    static int de_bugger = 1;<br>
    //------------------------------------------------------------------<br>
    //This procedure interprets programs for a simple machine.  The machine<br>
    //has a register AC (accumulator), used arithmetic.  The interpreter<br>
    //keeps running until the run bit is turned off by the HALT instruction.<br>
    //The state of a process running on this machine consists of the memory,<br>
    //the program counter, the run bit, and the AC.  The input parameters<br>
    //consist of the memory image and the starting address.<br>
<br>
    public static void interpret (int memory[], int starting_address)<br>
    {<br>
	PC = starting_address;<br>
	while (Buggs [run_bit])<br>
	{<br>
	    instr = memory [PC]; //fetch next instruction into instr<br>
	    PC = PC + 1;  //increment program counter<br>
	    data_loc = find_data (instr, memory);   //locate data (-1 if none)<br>
	    if (data_loc >= 0) // if data_loc is -1, there is no operand<br>
		data = memory [data_loc]; // fetch the data<br>
	    execute (instr, data);  //execute instruction<br>
	    if (Buggs [de_bugger] == true)<br>
	    {<br>
		System.out.println ("Your Accumulator = " + AC);<br>
	    }<br>
	}<br>
    }<br>
<br>

    public Interpreter (boolean whatthebug)<br>
    {<br>
	AC = 0; // sets the accumulator to 0<br>
	Buggs [run_bit] = true; // sets the run_bit boolean to true<br>
	Buggs [de_bugger] = whatthebug; // and is sent a boolean argument to the de_bug<br>
    }<br>
<br>

    //------------------------------------------------------------------<br>
    private static int find_data (int instr, int run[])<br>
    {<br>
	if (instr == 1 || instr == 2) // clear or halt<br>
	{<br>
	    PC += 1;<br>
	    return -1; // no data<br>
	}<br>
	else if (instr == 3)  // Addi adds contents of next memory location<br>
	{<br>
	    int PCNow = PC;<br>
	    PC += 1;<br>
	    return PCNow;<br>
	}<br>
	else            // Addm adds contents of memory location y<br>
	{<br>
	    int PCNow = PC;<br>
	    PC += 1;<br>
	    return run [PCNow];<br>
	}<br>
    }<br>
<br>

    //------------------------------------------------------------------<br>
    private static void execute (int type, int data)<br>
    {<br>
	int CLR = 1;//Clear<br>
	int ADDI = 3;//adds the value of x to the AC<br>
	int ADDM = 4;//adds the value in memory location y to AC<br>
	int HALT = 2;//Stop<br>
	if (type == CLR)<br>
	{<br>
	    AC = 0; //sets the accumulator to 0<br>
	    System.out.println ("Your Accumulator is " + AC);<br>
	}<br>
	else if (type == HALT)<br>
	{<br>
	    Buggs [run_bit] = false; //Stops the while loop<br>
	}<br>
	else if (type == ADDI || type == ADDM)<br>
	{<br>
	    AC = AC + data; // adds value of data to the AC<br>
	}<br>
	else<br>
	    System.out.println ("What the Bugger!! Its not working");<br>
    }<br>
}<br>
//----------------------------------------------------------------------<br>
<br>
<br>Output:<br>
What the Bugger!! Its not working<br>
Your Accumulator = 0<br>
Your Accumulator is 0<br>
Your Accumulator = 0<br>
Your Accumulator = 7<br>
Your Accumulator is 0<br>
Your Accumulator = 0<br>
Your Accumulator = 2<br>
Your Accumulator = 9<br>
What the Bugger!! Its not working<br>
Your Accumulator = 9<br>
Your Accumulator = 9<br>
<br>