<font color="#13B7FD" size="15"><b>Computer Graphics</b></font><br>
<br>
<br><font color="#cccccc" size="11"><b>2D Gui</b></font>
<br>
//---------------------------------------------------------------------//<br>
/* Hardik Bhatt                Assignment 1                    9/29/05 */<br>
/*                                                                     */<br>
/* Discription: A program that originally creates a red diamond a blue */<br>
/*   rectangle and a green triangle and using library functions the    */<br>
/*   purpose of this assignment is to make the colors of the diamond,  */<br>
/*   rectangle and triangle change by using the given operations. And  */<br>
/*   move the positions of the rectangle and diamond by clicking and   */<br>
/*   moving the mouse                                                  */<br>
/*                                                                     */<br>
/*                                                                     */<br>
/*                                                                     */<br>
//---------------------------------------------------------------------//<br>
<br>
#include <stdlib.h>			// standard definitions<br>
#include <iostream.h>			// C++ I/O<br>
#include <stdio.h>			// C I/O (for sprintf) <br>
#include <math.h>			// standard definitions<br>
<br>
#include <GL/glut.h>			// GLUT<br>
#include <GL/glu.h>			// GLU<br>
#include <GL/gl.h>			// OpenGL<br>
<br>
// global variable declarations<br>
<br>
GLint windowHeight, windowWidth;<br>
//boolean used to manage the color changing<br>
GLboolean MY_SWAP = true;<br>
GLboolean MY_TRI = true;<br>
<br>
//temperary variable holders<br>
GLfloat REC_X, REC_Y = 0;<br>
GLfloat TRI_X, TRI_Y = 0;<br>
GLfloat DIM_X, DIM_Y = 0;<br>
GLfloat MY_DIR = 0.02;<br>
<br>

//-----------------------------------------------------------------------<br>
//	Sets up some default OpenGL values.<br>
//-----------------------------------------------------------------------<br>
<br>
void myInit()<br>
{<br>
    glClearColor(0.5, 0.5, 0.5, 1.0);		// background color<br>
    glShadeModel(GL_SMOOTH);		// smooth shading<br>
}<br>
<br>
//-----------------------------------------------------------------------<br>
// reshape callback function<br>
//	This is called each time the window is reshaped<br>
//-----------------------------------------------------------------------<br>
void myReshape(int winWidth, int winHeight) <br>
{<br>
<br>
  windowHeight = winHeight;<br>
  windowWidth = winWidth;<br>
<br>
  // update projection<br>
  glViewport (0, 0, winWidth,  winHeight);  // update the viewport<br>
  glMatrixMode(GL_PROJECTION);              // update the projection<br>
  glLoadIdentity();               <br>
<br>
  gluOrtho2D(-1.0, 1.0, -1.0, 1.0);           // map unit square to viewport<br>
  glMatrixMode(GL_MODELVIEW);<br>
<br>
  glutPostRedisplay();                      // request redisplay<br>
  <br>
  
}<br>
<br>


//-----------------------------------------------------------------------<br>
// display callback function<br>
//	This is called each time application needs to redraw itself.<br>
//-----------------------------------------------------------------------<br>
<br>
void myDisplay()<br>
{<br>
    glClear(GL_COLOR_BUFFER_BIT);       // clear the window<br>
   	<br>
    
	if (MY_SWAP == true)<br>
		glColor3f(1.0, 0.0, 0.0);       // set color to red<br>
	else<br>
		glColor3f(0.0, 0.0, 1.0);       // set color to blue<br>
	<br>
    glBegin(GL_POLYGON);            // list the vertices to draw a diamond<br>
	glVertex2f(0.00 + DIM_X, 0.80 + DIM_Y);<br>
	glVertex2f(-0.80 + DIM_X, 0.00 + DIM_Y);<br>
	glVertex2f(0.00 + DIM_X, -0.80 + DIM_Y);<br>
	glVertex2f(0.80 + DIM_X, 0.00 + DIM_Y);<br>
    glEnd();<br>
    <br>
	if (MY_SWAP == true)<br>
		glColor3f(0.0, 0.0, 1.0);       // set color to blue<br>
	else<br>
		glColor3f(1.0, 0.0, 0.0);       // set color to red<br>
	<br>
	glRectf(-0.5 + REC_X, -0.5 + REC_Y, 0.5 + REC_X, 0.5 + REC_Y);  // draw a rectangle (lower left and upper right corners specified)<br>
	<br>
	
	if (MY_TRI == true)<br>
		glColor3f(0.0, 1.0, 0.0);       // set color to green<br>
	else<br>
		glColor3f(0.0, 0.0, 0.0);       // set color to black<br>
	<br>
	glBegin(GL_TRIANGLES);		// Drawing Using Triangles<br>
	glVertex2f( 0.0 + TRI_X, 0.35 + TRI_Y);		// Top<br>
	glVertex2f(-0.2 + TRI_X,-0.17 + TRI_Y);		// Bottom Left<br>
	glVertex2f( 0.2 + TRI_X,-0.17 + TRI_Y);		// Bottom Right<br>
    glEnd();					// Finished Drawing<br>
<br>
    glFlush();				// force OpenGL to render now<br>
<br>
    glutSwapBuffers();			// swap buffers<br>
}<br>
<br>
//-----------------------------------------------------------------------<br>
// keyboard callback function<br>
//	This is called whenever a keyboard key is hit.<br>
//-----------------------------------------------------------------------<br>
<br>
void myKeyboard(unsigned char c, int x, int y)<br>
{<br>
    switch (c)<br>
    {<br>
      case 'q':<br><br>
		  exit(0);			// exit<br>
	  break;<br>
	}<br>
    glutPostRedisplay();		// request redisplay<br>
}<br>
<br>
void mySpecialKeys (int key, int x, int y)<br>
{<br>
	//if the ctrl key is pressed the triangle moves if not<br>
	//the rectangle will move using the arrow keys<br>
	if (glutGetModifiers() == GLUT_ACTIVE_CTRL)<br>
	{<br>
		switch(key)		//mainting the movement key fot the triangle<br>
		{<br>
			case GLUT_KEY_LEFT:		<br>
				TRI_X = TRI_X - MY_DIR;<br>
			break;<br>
			case GLUT_KEY_RIGHT:<br>
				TRI_X = TRI_X + MY_DIR;<br>
			break;<br>
			case GLUT_KEY_UP:<br>
				TRI_Y = TRI_Y + MY_DIR;<br>
			break;<br>
			case GLUT_KEY_DOWN:<br>
				TRI_Y = TRI_Y - MY_DIR;<br>
			break;<br>
		}	//end switch statement<br>
	}	//end if statement<br>
	else<br>
	{<br>
		switch(key)		//mainting the movement key fot the rectangle<br>
		{<br>
			case GLUT_KEY_LEFT:<br>
				REC_X	= REC_X - MY_DIR;<br>
		    break;<br>
			case GLUT_KEY_RIGHT:<br>
				REC_X	= REC_X + MY_DIR;<br>
		    break;<br>
			case GLUT_KEY_UP:<br>
				REC_Y	= REC_Y + MY_DIR;<br>
			break;<br>
			case GLUT_KEY_DOWN:<br>
				REC_Y	= REC_Y - MY_DIR;<br>
			break;<br>
		}	//end switch statement<br>
	}	//end else statement<br>
	glutPostRedisplay();		// request redisplay<br>
}<br>
<br>
void myMotionRec(int x, int y)<br>
{<br>
	//maintaning the x and y coordinate of the mouse to move the<br>
	//rectangle respectively<br>
	REC_X = ((x - 200.0)/200.0);<br>
	REC_Y = (((400.0 - y) - 200.0)/200.);<br>
	glutPostRedisplay();		// request redisplay<br>
}<br>
<br>
void myMotionDim(int x, int y)<br>
{<br>
	//maintaning the x and y coordinate of the mouse to move the<br>
	//diamond respectively<br>
	DIM_X = ((x - 200.0)/200.0);<br>
	DIM_Y = (((400.0 - y)-200.0)/200.0);<br>
	glutPostRedisplay();			// request redisplay<br>
}<br>
<br>

// called if mouse click<br>
void myMouse(int b, int s, int x, int y) <br>
{<br>
	switch  ( b ) <br>
	{    // b indicates the button<br>
	case GLUT_LEFT_BUTTON:<br>
		if (s == GLUT_DOWN)      // button pressed<br>
		{<br>
			MY_SWAP = !MY_SWAP;<br>
			glutMotionFunc(myMotionRec);<br>
		}<br>
		else if (s == GLUT_UP)   // button released<br>
		{<br>
			MY_SWAP = MY_SWAP;<br>
		}<br>
	break;<br>
		<br>
	case GLUT_RIGHT_BUTTON:<br>
		if (s == GLUT_DOWN)      // button pressed<br>
		{<br>
			MY_TRI = !MY_TRI;<br>
			glutMotionFunc(myMotionDim);<br>
		}<br>
		else if (s == GLUT_UP)   // button released<br>
		{<br>
			MY_TRI = !MY_TRI;<br>
		}<br>
		break;<br>
	}	//end switch statement<br>
	glutPostRedisplay();			  // request redisplay<br>
}<br>
<br>


// called if timer event occurs<br>
void myTimeOut(int id) <br>
{<br>
	// advance the state of animation incrementally<br>
	glutPostRedisplay();			  // request redisplay<br>
	glutTimerFunc(10000, myTimeOut, 0);  // request next timer event<br>
	MY_SWAP = !MY_SWAP;<br>
}<br>
<br>
<br>

//-----------------------------------------------------------------------<br>
// main program<br>
//	<br>
//-----------------------------------------------------------------------<br>
int main(int argc, char **argv)<br>
{<br>
    <br>				
    glutInit(&argc, argv);   //initialize glut and gl<br>
    glutInitDisplayMode(		<br>
		GLUT_DOUBLE |		// double buffering<br>
		GLUT_RGB );		    // RGB color mode<br>
<br>
    glutInitWindowSize(400, 400);   // 400x400 window<br>
    glutInitWindowPosition(0,0);    // upper left<br>
    glutCreateWindow("My First OpenGL Program: Assignment 1"); 	// create the window<br>
<br>
	//register callbacks<br>
    glutDisplayFunc(myDisplay);		//  call myDisplay to redraw window<br>
    //keyboard entries<br>
    glutKeyboardFunc(myKeyboard);   // call myKeyboard when key is hit<br>
	glutSpecialFunc(mySpecialKeys); //call mySpecialKeys when key is hit<br>
	<br>
    //Mouse entries<br>
    glutReshapeFunc(myReshape);     // call myReshape if window is resized<br>
    glutMouseFunc(myMouse);         // call in mouse event<br>
	glutMotionFunc(NULL);<br>
<br>
	//OpenGL Timer<br>
    glutTimerFunc(10000, myTimeOut, 0);<br>
<br>
    myInit();				// our own initializations<br>
<br>
    glutMainLoop();			// pass control to GLUT, start it running<br>
    return 0;               // ANSI C expects this<br>
}<br>
<br>