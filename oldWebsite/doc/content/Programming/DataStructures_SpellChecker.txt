<font color="#13B7FD" size="15"><b>Data Structures</b></font><br>
<br>
<br><font color="#cccccc" size="11"><b>Project Breakdown</b></font>
<br>
/*****************************************************************************/<br>
/* Hardik Bhatt                                                              */<br>
/* Results:                                                                  */<br>
/* SpellCheckerDriver.java:                                                  */<br>
/* This Program is the driver for my spell checker. It first receives 2 file */<br>
/* from my folder then puts all the dictionary words in my HashTable. Then   */<br>
/* using my input folder it takes each word for my input files and checks for*/<br>
/* all the possible words that match it.                                     */<br>
/*                                                                           */<br>
/* SpellChecker.java:                                                        */<br>
/* This Program is my basic spellcheck method that receives the wrong word   */<br>
/* and check for all the possible corrects spelling by using my HashTable    */<br>
/* method                                                                    */<br>
/*                                                                           */<br>
/* SCHashTable.java:                                                         */<br>
/* This Program gets a big file of correct (dictionary) words and inserts    */<br>
/* each word in a hash table basically creating a dictionary                 */<br>
/*                                                                           */<br>
/* LinkedList.java:                                                          */<br>
/* A class that represents a linked list data structure                      */<br>
/*                                                                           */<br>
/* SCNode.java:                                                              */<br>
/* A class that a node to be used in a linked list data structure            */<br>
/*                                                                           */<br>
/* How to compile and run your program:                                      */<br>
/* You must compile the program in my SpellCheckerDriver.java class which    */<br>
/* will call all the necessary functions needed to spellcheck a given word   */<br>
/*                                                                           */<br>
/* Known Bugs and Limitations:                                               */<br>
/* The only bug in this program is that it doesn't handle any type of        */<br>
/* exception which would halt the program. The limitations in this program   */<br>
/* are that the size of the HashTable cannot be given from the user it is    */<br>
/* already set so if the user decides to make the dictionary bigger then a   */<br>
/* problem is likely to emerge.                                              */<br>
/*                                                                           */<br>
/* File Directory:                                                           */<br>
/* dictionary.txt: This file is my dictionary file. It contains the potential*/<br>
/* correct word that would be used to compare with the wrong word using      */<br>
/* SpellChecker.java class.                                                  */<br>
/*                                                                           */<br>
/* input.txt: This file is my wrong word file. It contains the wrong word    */<br>
/* that are to be used to compare with the dictionary words.                 */<br>
/*                                                                           */<br>
/* Source Files:                                                             */<br>
/* SpellCheckerDriver.java                                                   */<br>
/* SpellChecker.java                                                         */<br>
/* SCHashTable.java                                                          */<br>
/* LinkedList.java                                                           */<br>
/* SCNode.java                                                               */<br>
/*****************************************************************************/<br>
<br>
<br><font color="#cccccc" size="11"><b>SpellCheckerDriver.java</b></font>
<br>
/*****************************************************************************/<br>
/*                                                                           */<br>
/* SpellCheckerDriver.java                                                   */<br>
/*                                                                           */<br>
/* Author: Hardik Bhatt                                                      */<br>
/* Date: 2004 Demeber 13                                                     */<br>
/*                                                                           */<br>
/* This Program is the driver for my spell checker. It first receaves 2 file */<br>
/* from my folder then puts all the dictionary words in my HashTable. Then   */<br>
/* using my input folder it takes each word for my input files and checks for*/<br>
/* all the possible words that match it.                                     */<br>
/*                                                                           */<br>
/*****************************************************************************/<br>
import java.io.*;<br>
import java.util.*;<br>
<br>
public class SpellCheckDriver<br>
{<br>
    public static void main (String [] args) throws IOException<br>
    {<br>
	int DEFAULT_SIZE = 30000;<br>
	SCHashTable Hash = new SCHashTable (DEFAULT_SIZE); // This hold the dictionary words<br>
	SpellChecker Correction = new SpellChecker ();<br>
	LinkedList WordCheck;<br>
	LinkedList Right = new LinkedList ();<br>
	int Line_num = 0;<br>
	int Dict_size = 0;<br>
	String Dict_word;<br>
	String Wrong_word;<br>
	SCNode point;<br>
	String returned;<br>
	int load_factor = 0;<br>
<br>

	FileReader dictionary = new FileReader ("dictionary.txt");  // used ot read in from a file<br>
	BufferedReader dictinput = new BufferedReader (dictionary);<br>
<br>
	Dict_word = (String) dictinput.readLine ();<br>
	while (Dict_word != null)<br>
	{<br>
	    Hash.insert (Dict_word);<br>
	    Dict_word = dictinput.readLine ();<br>
	    Dict_size++;<br>
	}<br>
	System.out.println ("Dictionary Entries complete:");<br>
	System.out.println ("Dictionary size " + Dict_size);<br>
	System.out.println ();<br>
<br>

	/***********************************Spellchecker*********************************/<br>
<br>
	FileReader wordfile = new FileReader ("input.txt");  // used ot read in from a file<br>
	BufferedReader input = new BufferedReader (wordfile);<br>
<br>
	Wrong_word = input.readLine ();<br>
	while (Wrong_word != null)<br>
	{<br>
	    WordCheck = Correction.Check (Wrong_word);<br>
	    point = WordCheck.getHead ();<br>
	    while (point != null)<br>
	    {<br>
		returned = Hash.find ((String) point.getData ());<br>
<br>
		if (returned != null && returned.equals ((String) point.getData ()))<br>
		{<br>
		    Right.insertBack (point.getData ());<br>
		}<br>
		point = point.getNext ();<br>
	    }<br>
	    Line_num++;<br>
	    System.out.println (Wrong_word + ", " + Line_num + ":   " + Right);<br>
	    Wrong_word = input.readLine ();<br>
	    Right = new LinkedList ();<br>
	}<br>
	load_factor = (Dict_size / DEFAULT_SIZE);<br>
	System.out.println ();<br>
	System.out.println ("Num_collisions: " + Hash.NumCol ());<br>
	System.out.println ("load_factor: " + load_factor);<br>
    }<br>
}<br>
<br>
<br><font color="#cccccc" size="11"><b>SpellChecker.java</b></font>
<br>
/*****************************************************************************/<br>
/*                                                                           */<br>
/* SpellChecker.java                                                         */<br>
/*                                                                           */<br>
/* Author: Hardik Bhatt                                                      */<br>
/* Date: 2004 Demeber 13                                                     */<br>
/*                                                                           */<br>
/* This Program is my basic spellcheck method that recieves the wrong word   */<br>
/* and check for all the possible corrects spelling by using my HashTable    */<br>
/* method                                                                    */<br>
/*                                                                           */<br>
/* Instance Variables:                                                       */<br>
/* word: Stores the give wrong word.                                         */<br>
/* Letter: Stores the word as an array of charactors.                        */<br>
/* Search: Used to check through the HashTable for possible correct words    */<br>
/* CheckDict: Stores all the posible changed words to be checked in the hash */<br>
/*                                                                           */<br>
/* Constructors:                                                             */<br>
/* SpellChecker (): Default constructor which sets the word to null          */<br>
/* SpellChecker (String): Constructor that sets word equal to the given word */<br>
/*                                                                           */<br>
/* Methods:                                                                  */<br>
/* getArray (String): Stores the given word as an array of charactors        */<br>
/* Check (String): Implements the different types of ways we need to check   */<br>
/*                 for each word.                                            */<br>
/* RemoveOneL (char[], int): Removes one letter from each word one at a time */<br>
/* ExchangeOneL (char): Exchanhes one letter from each word                  */<br>
/* ChangeOneL (char[], int): Changes one letter from each word to be checked */<br>
/*                          from a-z                                         */<br>
/* MakeString (char[]): Creates a string from the given charactor array      */<br>
/*                                                                           */<br>
/*****************************************************************************/<br>
import java.io.*;<br>
import java.util.StringTokenizer;<br>
import java.lang.String;<br>
<br>
public class SpellChecker<br>
{<br>
    protected String word;//used to store the given word<br>
    protected char[] Letter;//used to store the word as a array of charactors<br>
    protected SCHashTable Search;//used to compare the word with the word in the HashTable<br>
    protected LinkedList CheckDict = new LinkedList ();//used to store the potentions checkwords as a linked list<br>
<br>
    //Default constructor which stores the word as null<br>
    public SpellChecker ()<br>
    {<br>
	word = null;<br>
    }//end of SpellChecker ()<br>
<br>
    //Constructor which stores the given word as word<br>
    public SpellChecker (String spl_check)<br>
    {<br>
	word = spl_check;<br>
    }//end of SpellChecker (String spl_check)<br>
<br>
    //Given a word it brakes the word down into an array of Charactors <br>
    //and stores it as array<br>
    public char[] getArray (String word)<br>
    {<br>
	char[] array = new char [word.length ()];//array of charactors of one word<br>
	for (int i = 0 ; i %3c word.length () ; i++)<br>
	{<br>
	    array [i] = word.charAt (i);<br>
	}//end of for loop<br>
	return array;<br>
    }//end of getArray (String word)<br>
<br>
    //This method calls three other methods which basically checks the <br>
    //different ways we are suppose to check for a given worng word.<br>
    public LinkedList Check (String check)<br>
    {<br>
	char[] array = new char [check.length ()];<br>
	for (int i = 0 ; i %3c check.length () ; i++)<br>
	{<br>
	    CheckDict.insertBack (RemoveOneL (getArray (check), i));<br>
	}<br>
	ExchangeOneL (getArray (check));<br>
	for (int i = 0; i %3c check.length(); i++)<br>
	{<br>
	    ChangeOneL(getArray(check), i);<br>
		    }<br>
	return CheckDict;<br>
    }//end of Check (String check)<br>
<br>
    //The method that removes one letter for the given word to be used in Check<br>
    public String RemoveOneL (char[] spl_check, int remove)<br>
    {<br>
	String removeOne = "";<br>
	for (int i = 0 ; i %3c spl_check.length ; i++)<br>
	{<br>
	    if (i != remove)<br>
	    {<br>
		removeOne = removeOne + spl_check [i];<br>
	    }//end of if statement<br>
	}//end of for loop<br>
	return removeOne;<br>
    }//end of RemoveOneL (char[] spl_check, int remove)<br>
<br>
    //The method that exchanges on letter with another to be used in Check<br>
    public void ExchangeOneL (char[] spl_check)<br>
    {<br>
	char hold;<br>
	String swap = "";<br>
	for (int i = 0 ; i %3c spl_check.length - 1 ; i++)<br>
	{<br>
	    hold = spl_check [i + 1];<br>
	    spl_check [i + 1] = spl_check [i];<br>
	    spl_check [i] = hold;<br>
	    swap = MakeString (spl_check);<br>
	    CheckDict.insertBack (swap);<br>
	}//end of for loop<br>
    }//end of ExchangeOneL (char[] spl_check)<br>
<br>
    //This metod changes each letter in the word from a-z to be used in Check<br>
    public void ChangeOneL (char[] spl_check, int index)<br>
    {<br>
	String Word = "";<br>
	for (char i = 'a' ; i %3c= 'z' ; i++)<br>
	{<br>
	    spl_check [index] = i;<br>
	    CheckDict.insertBack (MakeString (spl_check));<br>
	}//end of for loop<br>
    }//end of ChangeOneL (char[] spl_check, int index)<br>
<br>
    //Given a charactor array it chenges it back to a whole word.<br>
    public String MakeString (char[] spl_check)<br>
    {<br>
	String countS = "";<br>
	for (int i = 0 ; i %3c spl_check.length ; i++)<br>
	{<br>
	    countS = countS + spl_check [i];<br>
	}//end of for loop<br>
	return countS;<br>
    }//end of MakeString (char[] spl_check)<br>
}//end of SpellChecker class<br>
<br>
<br>input.txt<br>
tae<br>
mue<br>
atc<br>
<br>
<br>Output<br>
Dictionary Entries complete:<br>
Dictionary size 24521<br>
<br>
tae, 1:   ta, ate, mae, rae, tee, the, tie, toe, tab, tad, tag, tam, tan, tao, tap, tar, tat, tau, tax, <br>
mue, 2:   me, mu, cue, due, hue, rue, sue, mae, moe, mud, mug, mum, <br>
atc, 3:   at, etc, ftc, abc, arc, ate, <br>
<br>
Num_collisions: 11154<br>
load_factor: 0<br>
<br>
