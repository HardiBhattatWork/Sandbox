<font color="#13B7FD" size="15"><b>Artificial Intelligence</b></font><br>
<br>
<br><font color="#cccccc" size="11"><b>AStar Method</b></font>
<br>
/*******************************************************************<br>
     AStar<br>
     Hardik Bhatt<br>
     February 2006<br>
<br>
     Performs path-finding on a map using A* algorithm: F = G + H<br>
<br>
     Cost function G must vary based on the type of cell being<br>
     visited: ocean, desert, forest, hill, mountain.<br>
<br>
     order of preference: forest, desert, hill, mountain, ocean (shallow)<br>
     avoided:             deep ocean where a cell is sorrounded by water<br>
			  (radius 3 or more)<br>
<br>
     color codes:         ocean = blue = 0,     hill = red = 1,<br>
			  forest = green = 2,   desert = yellow = 3,<br>
			  mountain = white = 4<br>
*/<br>
<br>
import java.awt.*;<br>
import javax.swing.*;<br>
import java.applet.*;<br>
<br>
//*******************************************************************<br>
//*** implements path-finding through a map using A* algorithm<br>
//***<br>
public class AStar extends JFrame<br>
{<br>
    //*** user preferences for map go here; map dimension is included<br>
    static Map mp;<br>
    static int mapSize = 40;<br>
    static int[] [] mapPlan =<br>
	{<br>
	    {2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1},<br>
	    {2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1},<br>
	    {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 1, 1},<br>
	    {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 1, 1},<br>
	    {4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 1, 1},<br>
	    {4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 1, 1},<br>
	    {4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 1, 1},<br>
	    {4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 1, 1},<br>
	    {4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 1, 1},<br>
	    {4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1},<br>
	    {1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1},<br>
	    {1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1},<br>
	    {1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1},<br>
	    {1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1},<br>
	    {1, 1, 1, 1, 3, 3, 3, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1},<br>
	    {1, 1, 1, 1, 3, 3, 3, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1},<br>
	    {1, 1, 1, 1, 3, 3, 3, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 4, 1, 4, 1, 4, 4, 4, 4, 1, 1, 1},<br>
	    {1, 1, 1, 1, 3, 3, 3, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 4, 1, 4, 1, 4, 4, 4, 4, 1, 1, 1},<br>
	    {1, 1, 1, 1, 3, 3, 3, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 1, 1, 1, 4, 4, 1, 1, 1},<br>
	    {1, 1, 1, 1, 3, 3, 3, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},<br>
	    {1, 1, 1, 1, 3, 3, 3, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},<br>
	    {1, 1, 1, 1, 3, 3, 3, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},<br>
	    {1, 1, 1, 1, 3, 3, 3, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},<br>
	    {1, 1, 1, 1, 3, 3, 3, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1},<br>
	    {1, 1, 1, 1, 3, 3, 3, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1},<br>
	    {1, 1, 1, 1, 3, 3, 3, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1},<br>
	    {1, 1, 1, 1, 3, 3, 3, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1},<br>
	    {1, 1, 1, 1, 3, 3, 3, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1},<br>
	    {1, 1, 1, 1, 3, 3, 3, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1},<br>
	    {1, 1, 1, 1, 3, 3, 3, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1},<br>
	    {1, 1, 1, 1, 3, 3, 3, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1},<br>
	    {1, 1, 1, 1, 3, 3, 3, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1},<br>
	    {1, 1, 1, 1, 3, 3, 3, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1},<br>
	    {1, 1, 1, 1, 3, 3, 3, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2},<br>
	    {1, 1, 1, 1, 3, 3, 3, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2},<br>
	    {1, 1, 1, 1, 3, 3, 3, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2},<br>
	    {4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2},<br>
	    {4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2},<br>
	    {4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2},<br>
	    {4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2}<br>
	};<br>
<br>
	    //*** Implementing the Astar method<br>
    public static void Astar ()<br>
    {<br>
	AStar star = new AStar ();<br>
	star.setVisible (true);<br>
	PriorityQueue openQueue = new PriorityQueue ();<br>
	Coordinate currentState = new Coordinate (0, 0);<br>
	Coordinate temp = new Coordinate (0, 0);<br>
	int currentX = 0, currentY = 0;<br>
	int priority = 0;<br>
<br>
	while (!goalReached (currentX, currentY))<br>
	{<br>
	    System.out.println ("Re looped");<br>
	    System.out.println ();<br>
	    System.out.println ("Front of loop " + currentX + ", " + currentY);<br>
	    //*** Going Down<br>
	    if ((currentState.getX () + 1) %3c mapPlan.length && (!visited [currentState.getX () + 1] [currentState.getY ()]))<br>
	    {<br>
		if (!istoDeep (currentState.getX () + 1, currentState.getY ()))<br>
		{<br>
		    //System.out.println ("Astar(): Going Down ");<br>
		    temp.setX (currentState.getX () + 1);<br>
		    temp.setY (currentState.getY ());<br>
		    visited [currentX] [currentY] = true;<br>
		    priority = H_Manhattan (temp.getX (), temp.getY ()) + G_Path (temp.getX (), temp.getY ());<br>
		    System.out.println ("The Priority " + priority);<br>
		    openQueue.arrive (temp, priority);<br>
		    temp = new Coordinate (0, 0);<br>
		}<br>
	    }<br>
	    //*** Going Right<br>
	    if ((currentState.getY () + 1) %3c mapPlan.length && (!visited [currentState.getX ()] [currentState.getY () + 1]))<br>
	    {<br>
		if (!istoDeep (currentState.getX (), currentState.getY () + 1))<br>
		{<br>
		    //System.out.println ("Astar(): Going Right ");<br>
		    temp.setX (currentState.getX ());<br>
		    temp.setY (currentState.getY () + 1);<br>
		    visited [currentX] [currentY] = true;<br>
		    priority = H_Manhattan (temp.getX (), temp.getY ()) + G_Path (temp.getX (), temp.getY ());<br>
		    System.out.println ("The Priority " + priority);<br>
		    openQueue.arrive (temp, priority);<br>
		    temp = new Coordinate (0, 0);<br>
		}<br>
	    }<br>
	    //*** Going Up<br>
	    if ((currentState.getX () - 1) >= 0 && (!visited [currentState.getX () - 1] [currentState.getY ()]))<br>
	    {<br>
		if (!istoDeep (currentState.getX () - 1, currentState.getY ()))<br>
		{<br>
		    //System.out.println ("Astar(): Going Up ");<br>
		    temp.setX (currentState.getX () - 1);<br>
		    temp.setY (currentState.getY ());<br>
		    visited [currentX] [currentY] = true;<br>
		    priority = H_Manhattan (temp.getX (), temp.getY ()) + G_Path (temp.getX (), temp.getY ());<br>
		    System.out.println ("The Priority " + priority);<br>
		    openQueue.arrive (temp, priority);<br>
		    temp = new Coordinate (0, 0);<br>
		}<br>
	    }<br>
	    //*** Going Left<br>
	    if ((currentState.getY () - 1) >= 0 && (!visited [currentState.getX ()] [currentState.getY () - 1]))<br>
	    {<br>
		if (!istoDeep (currentState.getX (), currentState.getY () - 1))<br>
		{<br>
		    //System.out.println ("Astar(): Going Left ");<br>
		    temp.setX (currentState.getX ());<br>
		    temp.setY (currentState.getY () - 1);<br>
		    visited [currentX] [currentY] = true;<br>
		    priority = H_Manhattan (temp.getX (), temp.getY ()) + G_Path (temp.getX (), temp.getY ());<br>
		    System.out.println ("The Priority " + priority);<br>
		    openQueue.arrive (temp, priority);<br>
		    temp = new Coordinate (0, 0);<br>
		}<br>
	    }<br>
	    //*** Going South East<br>
	    if ((currentState.getX () + 1) %3c mapPlan.length && (currentState.getY () + 1) %3c mapPlan.length && (!visited [currentState.getX () + 1] [currentState.getY () + 1]))<br>
	    {<br>
		if (!istoDeep (currentState.getX () + 1, currentState.getY () + 1))<br>
		{<br>
		    //System.out.println ("Astar(): Going South East ");<br>
		    temp.setX (currentState.getX () + 1);<br>
		    temp.setY (currentState.getY () + 1);<br>
		    visited [currentX] [currentY] = true;<br>
		    priority = H_Manhattan (temp.getX (), temp.getY ()) + G_Path (temp.getX (), temp.getY ());<br>
		    System.out.println ("The Priority " + priority);<br>
		    openQueue.arrive (temp, priority);<br>
		    temp = new Coordinate (0, 0);<br>
		}<br>
	    }<br>
	    //*** Going North West<br>
	    if ((currentState.getX () - 1) >= 0 && (currentState.getY () - 1) >= 0 && (!visited [currentState.getX ()<br> - 1] [currentState.getY () - 1]))<br>
	    {<br>
		if (!istoDeep (currentState.getX () - 1, currentState.getY () - 1))<br>
		{<br>
		    //System.out.println ("Astar(): Going North West ");<br>
		    temp.setX (currentState.getX () - 1);<br>
		    temp.setY (currentState.getY () - 1);<br>
		    visited [currentX] [currentY] = true;<br>
		    priority = H_Manhattan (temp.getX (), temp.getY ()) + G_Path (temp.getX (), temp.getY ());<br>
		    System.out.println ("The Priority " + priority);<br>
		    openQueue.arrive (temp, priority);<br>
		    temp = new Coordinate (0, 0);<br>
		}<br>
	    }<br>
	    //*** Going North East<br>
	    if ((currentState.getX () - 1) >= 0 && (currentState.getY () + 1) %3c mapPlan.length && (!visited [currentState.getX () - 1] [currentState.getY () + 1]))<br>
	    {<br>
		if (!istoDeep (currentState.getX () - 1, currentState.getY () + 1))<br>
		{<br>
		    //System.out.println ("Astar(): Going North East ");<br>
		    temp.setX (currentState.getX () - 1);<br>
		    temp.setY (currentState.getY () + 1);<br>
		    visited [currentX] [currentY] = true;<br>
		    priority = H_Manhattan (temp.getX (), temp.getY ()) + G_Path (temp.getX (), temp.getY ());<br>
		    System.out.println ("The Priority " + priority);<br>
		    openQueue.arrive (temp, priority);<br>
		    temp = new Coordinate (0, 0);<br>
		}<br>
	    }<br>
	    //*** Going South West<br>
	    if ((currentState.getX () + 1) %3c mapPlan.length && (currentState.getY () - 1) >= 0 && (!visited [currentState.getX () + 1] [currentState.getY () - 1]))<br>
	    {<br>
		if (!istoDeep (currentState.getX () + 1, currentState.getY () - 1))<br>
		{<br>
		    //System.out.println ("Astar(): Going South West ");<br>
		    temp.setX (currentState.getX () + 1);<br>
		    temp.setY (currentState.getY () - 1);<br>
		    visited [currentX] [currentY] = true;<br>
		    priority = H_Manhattan (temp.getX (), temp.getY ()) + G_Path (temp.getX (), temp.getY ());<br>
		    System.out.println ("The Priority " + priority);<br>
		    openQueue.arrive (temp, priority);<br>
		    temp = new Coordinate (0, 0);<br>
		}<br>
	    }<br>
	    if (!openQueue.isEmpty ())<br>
	    {<br>
		Coordinate myMove = new Coordinate (0, 0);<br>
		myMove = (Coordinate) openQueue.leave ();<br>
		currentX = myMove.getX ();<br>
		currentY = myMove.getY ();<br>
	    }<br>
	    currentState.setX (currentX);<br>
	    currentState.setY (currentY);<br>
	    System.out.println ();<br>
	    //System.out.println ("I move here to " + currentX + ", " + currentY);<br>
	    System.out.println ("I move here to " + currentState.getX () + ", " + currentState.getY ());<br>
	    //*** display move to a new state by painting cell black<br>
	    star.moveToCell (currentX, currentY);<br>
	    star.wait (100);<br>
	    //*** erase current move and repaint previous cell color<br>
	    star.clearCell (currentX, currentY);<br>
	    openQueue = new PriorityQueue();<br>
<br>
	}<br>
	System.out.println ("Congratulations You have reached the Goal");<br>
    }<br>
}<br>
<br>