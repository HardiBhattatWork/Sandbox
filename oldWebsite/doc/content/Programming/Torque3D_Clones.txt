<font color="#13B7FD" size="15"><b>Torque 3D</b></font><br>
<br>
<br><font color="#cccccc" size="11"><b>Clones Method</b></font>
<br>
//============================================================================<br>
// control/client.cs<br>
//<br>
// This module contains client specific code for handling<br>
// the setup and operation of the player's in-game interface.<br>
//<br>
// 3D2E emaga4 tutorial game<br>
//<br>
//  Copyright (c) 2003, 2006 by Kenneth C. Finney.<br>
//============================================================================<br>
<br>
if ( IsObject( playerKeymap ) )  // If we already have a player key map,<br>
   playerKeymap.delete();        // delete it so that we can make a new one<br>
new ActionMap(playerKeymap);<br>
<br>
if ( IsObject( cloneKeymap ) )  // If we already have a clone key map,<br>
   cloneKeymap.delete();        // delete it so that we can make a new one<br>
new ActionMap(cloneKeymap);<br>
<br>
$movementSpeed = 1;             // m/s   for use by movement functions<br>
<br>
//----------------------------------------------------------------------------<br>
// The player sees the game via this control<br>
//----------------------------------------------------------------------------<br>
new GameTSCtrl(PlayerInterface) {<br>
   profile = "GuiContentProfile";<br>
   noCursor = "1";<br>
};<br>
//=====================New Code NOW=================================<br>
<br>

//======================End New Code NOW==========================<br>
function PlayerInterface::onWake(%this)<br>
//----------------------------------------------------------------------------<br>
// When PlayerInterface is activated, this function is called.<br>
//----------------------------------------------------------------------------<br>
{<br>
   $enableDirectInput = "1";<br>
   activateDirectInput();<br>
<br>
   // restore the player's key mappings<br>
   playerKeymap.push();<br>
}<br>
<br>
//----------------------------------------------------------------------------<br>
// The clone sees the game via this control<br>
//----------------------------------------------------------------------------<br>
<br>
new GameTSCtrl(CloneInterface) {<br>
   profile = "GuiContentProfile";<br>
   noCursor = "1";<br>
};<br>
<br>
function CloneInterface::onWake(%this)<br>
//----------------------------------------------------------------------------<br>
// When CloneInterface is activated, this function is called.<br>
//----------------------------------------------------------------------------<br>
{<br>
   $enableDirectInput = "1";<br>
   activateDirectInput();<br>
<br>
   // restore the player's key mappings<br>
   cloneKeymap.push();<br>
}<br>
<br>
function GameConnection::InitialControlSet(%this)<br>
//----------------------------------------------------------------------------<br>
// This callback is called directly from inside the Torque Engine<br>
// during server initialization.<br>
//----------------------------------------------------------------------------<br>
{<br>
   Echo ("Setting Initial Control Object");<br>
<br>
   // The first control object has been set by the server<br>
   // and we are now ready to go.<br>
<br>
   Canvas.SetContent(PlayerInterface);<br>
}<br>
<br>
//============================================================================<br>
// Motion Functions<br>
//============================================================================<br>
<br>
function GoLeft(%val)<br>
//----------------------------------------------------------------------------<br>
// "strafing"<br>
//----------------------------------------------------------------------------<br>
{<br>
   $mvLeftAction = %val;<br>
}<br>
<br>
function GoRight(%val)<br>
//----------------------------------------------------------------------------<br>
// "strafing"<br>
//----------------------------------------------------------------------------<br>
{<br>
   $mvRightAction = %val;<br>
}<br>
<br>
function GoAhead(%val)<br>
//----------------------------------------------------------------------------<br>
// running forward<br>
//----------------------------------------------------------------------------<br>
{<br>
   $mvForwardAction = %val;<br>
}<br>
<br>
function BackUp(%val)<br>
//----------------------------------------------------------------------------<br>
// running backwards<br>
//----------------------------------------------------------------------------<br>
{<br>
   $mvBackwardAction = %val;<br>
}<br>
<br>
function DoYaw(%val)<br>
//----------------------------------------------------------------------------<br>
// looking, spinning or aiming horizontally by mouse or joystick control<br>
//----------------------------------------------------------------------------<br>
{<br>
   $mvYaw += %val * ($cameraFov / 90) * 0.02;<br>
}<br>
<br>
function DoPitch(%val)<br>
//----------------------------------------------------------------------------<br>
// looking vertically by mouse or joystick control<br>
//----------------------------------------------------------------------------<br>
{<br>
   $mvPitch += %val * ($cameraFov / 90) * 0.02;<br>
}<br>
<br>
function DoJump(%val)<br>
//----------------------------------------------------------------------------<br>
// momentary upward movement, with character animation<br>
//----------------------------------------------------------------------------<br>
{<br>
   $mvTriggerCount2++;<br>
}<br>
<br>
//============================================================================<br>
// View Functions<br>
//============================================================================<br>
<br>
function Toggle3rdPPOVLook( %val )<br>
//----------------------------------------------------------------------------<br>
// Enable the "free look" feature. As long as the mapped key is pressed,<br>
// the player can view his avatar by moving the mouse around.<br>
//----------------------------------------------------------------------------<br>
{<br>
   if ( %val )<br>
      $mvFreeLook = true;<br>
   else<br>
      $mvFreeLook = false;<br>
}<br>
<br>
function Toggle1stPPOV(%val)<br>
//----------------------------------------------------------------------------<br>
// switch between 1st and 3rd person point-of-views.<br>
//----------------------------------------------------------------------------<br>
{<br>
   if (%val)<br>
   {<br>
      $firstPerson = !$firstPerson;<br>
   }<br>
}<br>
<br>
function GoClone(%val)<br>
//----------------------------------------------------------------------------<br>
// clone running forward<br>
//----------------------------------------------------------------------------<br>
{<br>
	for(%i = 10; %i > 0; %i--)<br>
	{<br>
		//$clones.getValue(%i).setVelocity("0 0 10");<br>
		$clones[%i].setVelocity( "0 0 10" );<br>
	}<br>
}<br>
<br>
function doTransform()<br>
{<br>
	for(%i = 10; %i > 0; %i--)<br>
	{<br>
		//%xfrm = $clones.getValue(%i).getTransform();<br>
		%xfrm = $clones[%i].getTransform();<br>
		%PosX = getword(%xfrm, 0); //get the current transform values<br>
		//echo("x =" SPC getword(%xfrm, 0) SPC "expected" SPC %PosX);<br>
		%PosY = getword(%xfrm, 1);<br>
		//echo("y =" SPC getword(%xfrm, 1) SPC "expected" SPC %PosY);<br>
		%PosZ = getword(%xfrm, 2);<br>
		//echo("z =" SPC getword(%xfrm, 2) SPC "expected" SPC %PosZ);<br>
		//$clones.getValue(%i).setTransform(%PosX SPC (%PosY + 5) SPC (%PosZ + 5) SPC "0 0 0 0");<br>
		$clones[%i].setTransform(%PosX SPC (%PosY + 5) SPC (%PosZ + 5) SPC "0 0 0 0");<br>
		//echo($clones[0].dump());<br>
	}<br>
}<br>
<br>
function doVelocity(%val)<br>
{<br>
	for(%i = 10; %i > 0; %i--)<br>
	{<br>
		//%Vpos = $clones.getValue(%i).getVelocity();<br>
		%Vpos = $clones[%i].getVelocity();<br>
		//$clones.getValue(%i).setVelocity("0" SPC (%Vpos + 20) SPC "0");<br>
		$clones[%i].setVelocity("0" SPC (%Vpos + 20) SPC "0");<br>
		//echo($clones[0].dump());<br>
	}<br>
}<br>
<br>
function doScale(%val)<br>
{<br>
	
	for(%i = 10; %i > 0; %i--)<br>
	{<br>
		%Size = $clones[%i].getScale();<br>
		echo("The scale is " SPC %Size);<br>
		$clones[%i].setScale(".5 .5 .5");<br>
	}<br>
}<br>
<br>
//============================================================================<br>
// keyboard control mappings<br>
//============================================================================<br>
// these ones available when player is in game<br>
PlayerKeymap.Bind( mouse, button0, MouseAction ); // left mouse button<br>
PlayerKeymap.Bind(keyboard, w, GoAhead);<br>
PlayerKeymap.Bind(keyboard, s, BackUp);<br>
PlayerKeymap.Bind(keyboard, a, GoLeft);<br>
PlayerKeymap.Bind(keyboard, d, GoRight);<br>
PlayerKeymap.Bind(keyboard, space, DoJump );<br>
PlayerKeymap.Bind(keyboard, z, Toggle3rdPPOVLook );<br>
PlayerKeymap.Bind(keyboard, tab, Toggle1stPPOV );<br>
<br>
PlayerKeymap.Bind(keyboard, c, GoClone);<br>
PlayerKeymap.Bind(keyboard, b, doTransform);<br>
PlayerKeymap.Bind(keyboard, v, doVelocity);<br>
PlayerKeymap.Bind(keyboard, n, doScale);<br>
<br>
PlayerKeymap.Bind(mouse, xaxis, DoYaw );<br>
PlayerKeymap.Bind(mouse, yaxis, DoPitch );<br>
<br>
// these ones are always available<br>
GlobalActionMap.BindCmd(keyboard, escape, "", "quit();");<br>
GlobalActionMap.Bind(keyboard, tilde, ToggleConsole);<br>
<br>